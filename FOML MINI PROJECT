{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"authorship_tag":"ABX9TyMYqayiE+9dnWH4pn5YtPXz"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","execution_count":null,"metadata":{"id":"eEx1VENDOaMk"},"outputs":[],"source":["import requests\n","import pandas as pd\n","import datetime\n"]},{"cell_type":"code","source":["\n","\n","### Step 1: Collect Train Schedule Data (using Indian Railways API from RapidAPI)\n","def get_train_schedule_data(api_url, params, headers):\n","    try:\n","        response = requests.get(api_url, params=params, headers=headers)\n","        if response.status_code == 200:\n","            try:\n","                return response.json()  # Assuming the API returns JSON\n","            except ValueError:\n","                print(\"Error: Unable to decode JSON from the response.\")\n","                return None\n","        else:\n","            print(f\"Error: Received status code {response.status_code}\")\n","            return None\n","    except requests.exceptions.RequestException as e:\n","        print(f\"Error: {e}\")\n","        return None\n","\n","# Example usage of Indian Railways API\n","train_api_url = 'https://indian-railway-irctc.p.rapidapi.com/api/trains/v1/train/status'\n","headers = {\n","    'X-RapidAPI-Key': 'your_rapidapi_key',  # Replace with your actual RapidAPI key\n","    'X-RapidAPI-Host': 'indian-railways-train-enquiry.p.rapidapi.com'\n","}\n","params = {'train_number': '12002'}  # Example train number\n","train_data = get_train_schedule_data(train_api_url, params, headers)\n","\n","# Proceed if data is successfully retrieved\n","if train_data:\n","    train_df = pd.DataFrame(train_data)\n","\n","### Step 2: Collect Weather Data using OpenWeatherMap API\n","def get_weather_data(api_key, city, date):\n","    try:\n","        weather_url = f\"http://api.openweathermap.org/data/2.5/weather?q={city}&appid={api_key}\"\n","        response = requests.get(weather_url)\n","        if response.status_code == 200:\n","            try:\n","                return response.json()  # Assuming the API returns JSON\n","            except ValueError:\n","                print(\"Error: Unable to decode JSON from the response.\")\n","                return None\n","        else:\n","            print(f\"Error: Received status code {response.status_code}\")\n","            return None\n","    except requests.exceptions.RequestException as e:\n","        print(f\"Error: {e}\")\n","        return None\n","\n","# Example usage\n","weather_api_key = 'your_openweathermap_api_key'  # Replace with your OpenWeatherMap API key\n","city = 'New Delhi'\n","date = '2024-10-21'\n","weather_data = get_weather_data(weather_api_key, city, date)\n","\n","# Proceed if weather data is successfully retrieved\n","if weather_data:\n","    weather_condition = weather_data['weather'][0]['main']  # E.g., Clear, Rain, Fog\n","\n","### Step 3: Combine Data into a DataFrame (if all data has been successfully retrieved)\n","if train_data and weather_data:\n","    combined_data = {\n","        'Distance Between Stations (km)': train_df['distance'],\n","        'Weather Conditions': weather_condition,\n","        'Day of the Week': datetime.datetime.strptime(date, '%Y-%m-%d').strftime('%A'),\n","        'Time of Day': train_df['departure_time'],\n","        'Train Type': train_df['train_type'],\n","        'Historical Delay (min)': train_df['historical_delay']\n","    }\n","\n","    final_df = pd.DataFrame([combined_data])\n","\n","    ### Step 4: Save Data to CSV\n","    final_df.to_csv('collected_train_delay_data.csv', index=False)\n","    print(\"Data collection complete. File saved as 'collected_train_delay_data.csv'.\")\n","else:\n","    print(\"Data collection failed due to missing or invalid data.\")\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"HOwIHrv_OkfH","executionInfo":{"status":"ok","timestamp":1729517591830,"user_tz":-330,"elapsed":1603,"user":{"displayName":"HANNAH JAMES","userId":"18060043825026327127"}},"outputId":"2b29b14b-a8a7-457d-b4dc-dad5a9d77342"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Error: Received status code 404\n","Error: Received status code 401\n","Data collection failed due to missing or invalid data.\n"]}]},{"cell_type":"code","source":["import pandas as pd\n","\n","# Load the dataset\n","data = pd.read_csv('train delay data.csv')\n","\n","# Check for missing values\n","missing_values = data.isnull().sum()\n","\n","# Display the count of missing values for each column\n","print(\"Missing Values Count:\")\n","print(missing_values[missing_values > 0])  # Only display columns with missing values\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"_zDguop9nOvF","executionInfo":{"status":"ok","timestamp":1729523196273,"user_tz":-330,"elapsed":660,"user":{"displayName":"HANNAH JAMES","userId":"18060043825026327127"}},"outputId":"1cc8f328-a06d-4ab5-b7c7-0ece108c338c"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Missing Values Count:\n","Series([], dtype: int64)\n"]}]},{"cell_type":"code","source":["import pandas as pd\n","from sklearn.preprocessing import StandardScaler\n","\n","# Load the dataset\n","data = pd.read_csv('train delay data.csv')\n","\n","# Display the original data\n","print(\"Original Data:\")\n","print(data.head())\n","\n","# Check for missing values\n","missing_values = data.isnull().sum()\n","print(\"\\nMissing Values Count:\")\n","print(missing_values[missing_values > 0])\n","\n","# Handling Missing Values\n","\n","# 1. Remove rows with missing values (if necessary)\n","# data.dropna(inplace=True)  # Uncomment to remove rows with any missing values\n","\n","# 2. Fill missing numeric values with the median\n","numeric_cols = data.select_dtypes(include=['float64', 'int64']).columns\n","data[numeric_cols] = data[numeric_cols].fillna(data[numeric_cols].median())\n","\n","# 3. Fill missing categorical values with the mode\n","categorical_cols = data.select_dtypes(include=['object']).columns\n","for column in categorical_cols:\n","    data[column].fillna(data[column].mode()[0], inplace=True)\n","\n","# 4. (Optional) Forward fill missing values\n","# data.fillna(method='ffill', inplace=True)  # Use the previous value to fill\n","\n","# 5. (Optional) Backward fill missing values\n","# data.fillna(method='bfill', inplace=True)  # Use the next value to fill\n","\n","# 6. (Optional) Interpolation\n","# data.interpolate(inplace=True)  # Linear interpolation for numeric columns\n","\n","# Display the corrected data\n","print(\"\\nCorrected Data:\")\n","print(data.head())\n","\n","# Save the corrected data to a new CSV file\n","data.to_csv('corrected_dataset.csv', index=False)\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"SbEmub6WnvZQ","executionInfo":{"status":"ok","timestamp":1729523302991,"user_tz":-330,"elapsed":435,"user":{"displayName":"HANNAH JAMES","userId":"18060043825026327127"}},"outputId":"861329f7-7238-4f32-e117-cbcc3613943c"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Original Data:\n","   Distance Between Stations (km) Weather Conditions Day of the Week  \\\n","0                             100              Clear          Monday   \n","1                             150              Rainy         Tuesday   \n","2                             200              Foggy       Wednesday   \n","3                              50              Clear        Thursday   \n","4                              75              Rainy          Friday   \n","\n","  Time of Day Train Type  Historical Delay (min) Route Congestion  \n","0     Morning    Express                       5              Low  \n","1   Afternoon  Superfast                      10           Medium  \n","2     Evening      Local                      15             High  \n","3       Night    Express                       2              Low  \n","4     Morning  Superfast                       8           Medium  \n","\n","Missing Values Count:\n","Series([], dtype: int64)\n","\n","Corrected Data:\n","   Distance Between Stations (km) Weather Conditions Day of the Week  \\\n","0                             100              Clear          Monday   \n","1                             150              Rainy         Tuesday   \n","2                             200              Foggy       Wednesday   \n","3                              50              Clear        Thursday   \n","4                              75              Rainy          Friday   \n","\n","  Time of Day Train Type  Historical Delay (min) Route Congestion  \n","0     Morning    Express                       5              Low  \n","1   Afternoon  Superfast                      10           Medium  \n","2     Evening      Local                      15             High  \n","3       Night    Express                       2              Low  \n","4     Morning  Superfast                       8           Medium  \n"]},{"output_type":"stream","name":"stderr","text":["<ipython-input-14-05a739fcb006>:28: FutureWarning: A value is trying to be set on a copy of a DataFrame or Series through chained assignment using an inplace method.\n","The behavior will change in pandas 3.0. This inplace method will never work because the intermediate object on which we are setting values always behaves as a copy.\n","\n","For example, when doing 'df[col].method(value, inplace=True)', try using 'df.method({col: value}, inplace=True)' or df[col] = df[col].method(value) instead, to perform the operation inplace on the original object.\n","\n","\n","  data[column].fillna(data[column].mode()[0], inplace=True)\n"]}]},{"cell_type":"code","source":["import pandas as pd\n","from sklearn.preprocessing import LabelEncoder\n","from sklearn.preprocessing import StandardScaler\n","\n","# Load the dataset\n","data = pd.read_csv('train delay data.csv')\n","\n","# Display the original data\n","print(\"Original Data:\")\n","print(data.head())\n","\n","# Check for missing values\n","missing_values = data.isnull().sum()\n","print(\"\\nMissing Values Count:\")\n","print(missing_values[missing_values > 0])\n","\n","# Handling Missing Values\n","\n","# Fill missing numeric values with the median\n","numeric_cols = data.select_dtypes(include=['float64', 'int64']).columns\n","data[numeric_cols] = data[numeric_cols].fillna(data[numeric_cols].median())\n","\n","# Fill missing categorical values with the mode\n","categorical_cols = data.select_dtypes(include=['object']).columns\n","for column in categorical_cols:\n","    data[column].fillna(data[column].mode()[0], inplace=True)\n","\n","# Convert categorical columns to numeric using Label Encoding\n","label_encoders = {}\n","for column in categorical_cols:\n","    le = LabelEncoder()\n","    data[column] = le.fit_transform(data[column])\n","    label_encoders[column] = le  # Store the label encoder for potential inverse transformation later\n","\n","# Display the data after label encoding\n","print(\"\\nData after Label Encoding:\")\n","print(data.head())\n","\n","#  Normalizing Numeric Data\n","scaler = StandardScaler()\n","data[numeric_cols] = scaler.fit_transform(data[numeric_cols])\n","\n","# Save the corrected data to a new CSV file\n","data.to_csv('corrected_dataset.csv', index=False)\n","\n","# If needed, print the mapping of label encodings for reference\n","for column, encoder in label_encoders.items():\n","    print(f\"\\nLabel Encodings for {column}: {dict(zip(encoder.classes_, encoder.transform(encoder.classes_)))}\")\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"Ind_o_N0oWCl","executionInfo":{"status":"ok","timestamp":1729523472282,"user_tz":-330,"elapsed":683,"user":{"displayName":"HANNAH JAMES","userId":"18060043825026327127"}},"outputId":"4aeeb1b0-3e28-4073-da66-8def2bb2d67c"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Original Data:\n","   Distance Between Stations (km) Weather Conditions Day of the Week  \\\n","0                             100              Clear          Monday   \n","1                             150              Rainy         Tuesday   \n","2                             200              Foggy       Wednesday   \n","3                              50              Clear        Thursday   \n","4                              75              Rainy          Friday   \n","\n","  Time of Day Train Type  Historical Delay (min) Route Congestion  \n","0     Morning    Express                       5              Low  \n","1   Afternoon  Superfast                      10           Medium  \n","2     Evening      Local                      15             High  \n","3       Night    Express                       2              Low  \n","4     Morning  Superfast                       8           Medium  \n","\n","Missing Values Count:\n","Series([], dtype: int64)\n","\n","Data after Label Encoding:\n","   Distance Between Stations (km)  Weather Conditions  Day of the Week  \\\n","0                             100                   0                1   \n","1                             150                   2                5   \n","2                             200                   1                6   \n","3                              50                   0                4   \n","4                              75                   2                0   \n","\n","   Time of Day  Train Type  Historical Delay (min)  Route Congestion  \n","0            2           0                       5                 1  \n","1            0           2                      10                 2  \n","2            1           1                      15                 0  \n","3            3           0                       2                 1  \n","4            2           2                       8                 2  \n","\n","Label Encodings for Weather Conditions: {'Clear': 0, 'Foggy': 1, 'Rainy': 2}\n","\n","Label Encodings for Day of the Week: {'Friday': 0, 'Monday': 1, 'Saturday': 2, 'Sunday': 3, 'Thursday': 4, 'Tuesday': 5, 'Wednesday': 6}\n","\n","Label Encodings for Time of Day: {'Afternoon': 0, 'Evening': 1, 'Morning': 2, 'Night': 3}\n","\n","Label Encodings for Train Type: {'Express': 0, 'Local': 1, 'Superfast': 2}\n","\n","Label Encodings for Route Congestion: {'High': 0, 'Low': 1, 'Medium': 2}\n"]},{"output_type":"stream","name":"stderr","text":["<ipython-input-16-5d27bc805bd1>:26: FutureWarning: A value is trying to be set on a copy of a DataFrame or Series through chained assignment using an inplace method.\n","The behavior will change in pandas 3.0. This inplace method will never work because the intermediate object on which we are setting values always behaves as a copy.\n","\n","For example, when doing 'df[col].method(value, inplace=True)', try using 'df.method({col: value}, inplace=True)' or df[col] = df[col].method(value) instead, to perform the operation inplace on the original object.\n","\n","\n","  data[column].fillna(data[column].mode()[0], inplace=True)\n"]}]},{"cell_type":"code","source":["import pandas as pd\n","import numpy as np  # Import NumPy for numerical operations\n","import seaborn as sns\n","import matplotlib.pyplot as plt\n","from sklearn.preprocessing import LabelEncoder\n","\n","# Load the dataset\n","data = pd.read_csv('train delay data.csv')\n","\n","# Display the original data\n","print(\"Original Data:\")\n","print(data.head())\n","\n","# Handle Missing Values\n","\n","# Fill missing numeric values with the median\n","numeric_cols = data.select_dtypes(include=['float64', 'int64']).columns\n","data[numeric_cols] = data[numeric_cols].fillna(data[numeric_cols].median())\n","\n","# Fill missing categorical values with the mode (without inplace=True)\n","categorical_cols = data.select_dtypes(include=['object']).columns\n","for column in categorical_cols:\n","    data[column] = data[column].fillna(data[column].mode()[0])  # Assign back to the column\n","\n","# Convert categorical columns to numeric using Label Encoding\n","label_encoders = {}\n","for column in categorical_cols:\n","    le = LabelEncoder()\n","    data[column] = le.fit_transform(data[column])\n","    label_encoders[column] = le  # Store the label encoder for potential inverse transformation later\n","\n","# Compute the correlation matrix\n","correlation_matrix = data.corr().abs()\n","\n","# Create a mask to ignore the upper triangle\n","mask = np.triu(np.ones_like(correlation_matrix, dtype=bool))\n","\n","# Set the threshold for dropping highly correlated features\n","threshold = 0.8\n","\n","# Find features with correlation above the threshold\n","high_correlation_pairs = correlation_matrix[mask].stack().reset_index()\n","high_correlation_pairs.columns = ['Feature 1', 'Feature 2', 'Correlation']\n","\n","# Filter pairs with correlation greater than the threshold\n","high_correlation_pairs = high_correlation_pairs[high_correlation_pairs['Correlation'] > threshold]\n","\n","# Create a set to hold features to drop\n","features_to_drop = set()\n","\n","# Identify features to drop\n","for i in range(len(high_correlation_pairs)):\n","    features_to_drop.add(high_correlation_pairs.iloc[i]['Feature 2'])\n","\n","# Drop features from the dataset\n","data.drop(columns=features_to_drop, inplace=True)\n","\n","# Display the remaining features\n","print(\"\\nRemaining Features after Dropping Highly Correlated Features:\")\n","print(data.head())\n","\n","# Optional: Save the cleaned dataset\n","data.to_csv('cleaned_dataset.csv', index=False)\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"kbAGuHeEpb8K","executionInfo":{"status":"ok","timestamp":1729523851494,"user_tz":-330,"elapsed":720,"user":{"displayName":"HANNAH JAMES","userId":"18060043825026327127"}},"outputId":"9c5581e6-a41e-4826-c576-8a612d7b8a62"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Original Data:\n","   Distance Between Stations (km) Weather Conditions Day of the Week  \\\n","0                             100              Clear          Monday   \n","1                             150              Rainy         Tuesday   \n","2                             200              Foggy       Wednesday   \n","3                              50              Clear        Thursday   \n","4                              75              Rainy          Friday   \n","\n","  Time of Day Train Type  Historical Delay (min) Route Congestion  \n","0     Morning    Express                       5              Low  \n","1   Afternoon  Superfast                      10           Medium  \n","2     Evening      Local                      15             High  \n","3       Night    Express                       2              Low  \n","4     Morning  Superfast                       8           Medium  \n","\n","Remaining Features after Dropping Highly Correlated Features:\n","Empty DataFrame\n","Columns: []\n","Index: [0, 1, 2, 3, 4]\n"]}]},{"cell_type":"code","source":["import pandas as pd\n","import seaborn as sns\n","import matplotlib.pyplot as plt\n","from sklearn.preprocessing import LabelEncoder\n","\n","# Load the dataset\n","data = pd.read_csv('train delay data.csv')\n","\n","# Display the original data\n","print(\"Original Data:\")\n","print(data.head())\n","\n","# Check for missing values\n","missing_values = data.isnull().sum()\n","print(\"\\nMissing Values Count:\")\n","print(missing_values[missing_values > 0])\n","\n","# Handling Missing Values\n","\n","# Fill missing numeric values with the median\n","numeric_cols = data.select_dtypes(include=['float64', 'int64']).columns\n","data[numeric_cols] = data[numeric_cols].fillna(data[numeric_cols].median())\n","\n","# Fill missing categorical values with the mode\n","categorical_cols = data.select_dtypes(include=['object']).columns\n","for column in categorical_cols:\n","    data[column].fillna(data[column].mode()[0], inplace=True)\n","\n","# Convert categorical columns to numeric using Label Encoding\n","label_encoders = {}\n","for column in categorical_cols:\n","    le = LabelEncoder()\n","    data[column] = le.fit_transform(data[column])\n","    label_encoders[column] = le  # Store the label encoder for potential inverse transformation later\n","\n","# Compute the correlation matrix\n","correlation_matrix = data.corr()\n","\n","# Set up the matplotlib figure\n","plt.figure(figsize=(12, 8))\n","\n","# Create a heatmap using seaborn\n","sns.heatmap(correlation_matrix, annot=True, fmt=\".2f\", cmap='coolwarm', square=True, cbar_kws={\"shrink\": .8})\n","\n","# Set the title of the heatmap\n","plt.title('Heatmap of Feature Correlations')\n","\n","# Show the plot\n","plt.show()\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":1000},"id":"a_MNGaz6opn-","executionInfo":{"status":"ok","timestamp":1729523647850,"user_tz":-330,"elapsed":2852,"user":{"displayName":"HANNAH JAMES","userId":"18060043825026327127"}},"outputId":"cb48b7f9-4867-49e0-95a5-0349b35e25bc"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Original Data:\n","   Distance Between Stations (km) Weather Conditions Day of the Week  \\\n","0                             100              Clear          Monday   \n","1                             150              Rainy         Tuesday   \n","2                             200              Foggy       Wednesday   \n","3                              50              Clear        Thursday   \n","4                              75              Rainy          Friday   \n","\n","  Time of Day Train Type  Historical Delay (min) Route Congestion  \n","0     Morning    Express                       5              Low  \n","1   Afternoon  Superfast                      10           Medium  \n","2     Evening      Local                      15             High  \n","3       Night    Express                       2              Low  \n","4     Morning  Superfast                       8           Medium  \n","\n","Missing Values Count:\n","Series([], dtype: int64)\n"]},{"output_type":"stream","name":"stderr","text":["<ipython-input-18-f7c56cf20d21>:27: FutureWarning: A value is trying to be set on a copy of a DataFrame or Series through chained assignment using an inplace method.\n","The behavior will change in pandas 3.0. This inplace method will never work because the intermediate object on which we are setting values always behaves as a copy.\n","\n","For example, when doing 'df[col].method(value, inplace=True)', try using 'df.method({col: value}, inplace=True)' or df[col] = df[col].method(value) instead, to perform the operation inplace on the original object.\n","\n","\n","  data[column].fillna(data[column].mode()[0], inplace=True)\n"]},{"output_type":"display_data","data":{"text/plain":["<Figure size 1200x800 with 2 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"code","source":["import pandas as pd\n","import numpy as np\n","from sklearn.preprocessing import LabelEncoder\n","\n","# Load the dataset\n","data = pd.read_csv('train delay data.csv')\n","\n","# Handle Missing Values\n","numeric_cols = data.select_dtypes(include=['float64', 'int64']).columns\n","data[numeric_cols] = data[numeric_cols].fillna(data[numeric_cols].median())\n","\n","categorical_cols = data.select_dtypes(include=['object']).columns\n","for column in categorical_cols:\n","    data[column] = data[column].fillna(data[column].mode()[0])\n","\n","# Convert categorical columns to numeric using Label Encoding\n","label_encoders = {}\n","for column in categorical_cols:\n","    le = LabelEncoder()\n","    data[column] = le.fit_transform(data[column])\n","    label_encoders[column] = le\n","\n","# Define the target variable\n","y = data['Historical Delay (min)']  # Replace with your target column name\n","\n","# Define the features\n","X = data.drop(columns=['Historical Delay (min)'])  # Exclude the target variable\n","\n","# Optionally, check the shapes of X and y\n","print(\"\\nFeatures (X) Shape:\", X.shape)\n","print(\"Target (y) Shape:\", y.shape)\n","\n","# Now X and y are ready for use in machine learning models\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"Hk4FPB9_qF-O","executionInfo":{"status":"ok","timestamp":1729523941770,"user_tz":-330,"elapsed":4,"user":{"displayName":"HANNAH JAMES","userId":"18060043825026327127"}},"outputId":"0528ee4b-3e07-4764-d72f-0da44e8e60f4"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["\n","Features (X) Shape: (2878, 6)\n","Target (y) Shape: (2878,)\n"]}]},{"cell_type":"code","source":["import pandas as pd\n","import numpy as np\n","from sklearn.model_selection import train_test_split\n","from sklearn.preprocessing import LabelEncoder\n","\n","# Load the dataset\n","data = pd.read_csv('train delay data.csv')\n","\n","# Handle Missing Values\n","numeric_cols = data.select_dtypes(include=['float64', 'int64']).columns\n","data[numeric_cols] = data[numeric_cols].fillna(data[numeric_cols].median())\n","\n","categorical_cols = data.select_dtypes(include=['object']).columns\n","for column in categorical_cols:\n","    data[column] = data[column].fillna(data[column].mode()[0])\n","\n","# Convert categorical columns to numeric using Label Encoding\n","label_encoders = {}\n","for column in categorical_cols:\n","    le = LabelEncoder()\n","    data[column] = le.fit_transform(data[column])\n","    label_encoders[column] = le\n","\n","# Define the target variable\n","y = data['Historical Delay (min)']  # Replace with your target column name\n","\n","# Define the features\n","X = data.drop(columns=['Historical Delay (min)'])  # Exclude the target variable\n","\n","# Split the data into training and testing sets\n","X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n","\n","# Display the shapes of the resulting sets\n","print(\"\\nTraining Features (X_train) Shape:\", X_train.shape)\n","print(\"Testing Features (X_test) Shape:\", X_test.shape)\n","print(\"Training Target (y_train) Shape:\", y_train.shape)\n","print(\"Testing Target (y_test) Shape:\", y_test.shape)\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"9YrRGUkkqblx","executionInfo":{"status":"ok","timestamp":1729524009704,"user_tz":-330,"elapsed":510,"user":{"displayName":"HANNAH JAMES","userId":"18060043825026327127"}},"outputId":"9e0eb44d-9630-456d-dfa2-092fb8b933bc"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["\n","Training Features (X_train) Shape: (2302, 6)\n","Testing Features (X_test) Shape: (576, 6)\n","Training Target (y_train) Shape: (2302,)\n","Testing Target (y_test) Shape: (576,)\n"]}]},{"cell_type":"code","source":["import pandas as pd\n","import numpy as np\n","from sklearn.model_selection import train_test_split\n","from sklearn.preprocessing import LabelEncoder\n","\n","# Load the dataset\n","data = pd.read_csv('train delay data.csv')\n","\n","# Handle Missing Values\n","numeric_cols = data.select_dtypes(include=['float64', 'int64']).columns\n","data[numeric_cols] = data[numeric_cols].fillna(data[numeric_cols].median())\n","\n","categorical_cols = data.select_dtypes(include=['object']).columns\n","for column in categorical_cols:\n","    data[column] = data[column].fillna(data[column].mode()[0])\n","\n","# Convert categorical columns to numeric using Label Encoding\n","label_encoders = {}\n","for column in categorical_cols:\n","    le = LabelEncoder()\n","    data[column] = le.fit_transform(data[column])\n","    label_encoders[column] = le\n","\n","# Define the target variable (y)\n","y = data['Historical Delay (min)']  # Replace with your target column name\n","\n","# Define the features (X)\n","X = data.drop(columns=['Historical Delay (min)'])  # Exclude the target variable\n","\n","# Split the data into training and testing sets\n","X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n","\n","# Display the resulting sets\n","print(\"Training Features (X_train):\\n\", X_train)\n","print(\"\\nTraining Target (y_train):\\n\", y_train)\n","print(\"\\nTesting Features (X_test):\\n\", X_test)\n","print(\"\\nTesting Target (y_test):\\n\", y_test)\n","\n","# Optionally, print the shapes\n","print(\"\\nShapes:\")\n","print(\"X_train shape:\", X_train.shape)\n","print(\"y_train shape:\", y_train.shape)\n","print(\"X_test shape:\", X_test.shape)\n","print(\"y_test shape:\", y_test.shape)\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"r-ZlEXwgrT4H","executionInfo":{"status":"ok","timestamp":1729524252241,"user_tz":-330,"elapsed":1367,"user":{"displayName":"HANNAH JAMES","userId":"18060043825026327127"}},"outputId":"6eea1d72-a5f3-47ce-f673-9c6dcd183852"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Training Features (X_train):\n","       Distance Between Stations (km)  Weather Conditions  Day of the Week  \\\n","252                              300                   0                6   \n","1808                              95                   1                5   \n","1426                              20                   2                4   \n","964                               20                   0                1   \n","2601                             265                   2                6   \n","...                              ...                 ...              ...   \n","1638                             295                   0                5   \n","1095                               0                   2                2   \n","1130                              30                   0                2   \n","1294                              30                   2                1   \n","860                              170                   0                5   \n","\n","      Time of Day  Train Type  Route Congestion  \n","252             0           1                 0  \n","1808            2           2                 1  \n","1426            1           0                 0  \n","964             1           1                 2  \n","2601            3           0                 0  \n","...           ...         ...               ...  \n","1638            1           2                 1  \n","1095            0           0                 0  \n","1130            2           1                 2  \n","1294            3           0                 0  \n","860             1           1                 2  \n","\n","[2302 rows x 6 columns]\n","\n","Training Target (y_train):\n"," 252     15\n","1808    26\n","1426    64\n","964     19\n","2601    50\n","        ..\n","1638    50\n","1095    17\n","1130    62\n","1294    40\n","860     73\n","Name: Historical Delay (min), Length: 2302, dtype: int64\n","\n","Testing Features (X_test):\n","       Distance Between Stations (km)  Weather Conditions  Day of the Week  \\\n","471                              165                   2                4   \n","1453                              40                   0                1   \n","2376                             240                   0                6   \n","1601                             130                   2                3   \n","1094                              30                   0                0   \n","...                              ...                 ...              ...   \n","811                              190                   1                5   \n","109                               65                   1                0   \n","2829                             835                   2                3   \n","163                              140                   2                0   \n","1921                             165                   2                6   \n","\n","      Time of Day  Train Type  Route Congestion  \n","471             2           0                 0  \n","1453            0           1                 2  \n","2376            2           1                 2  \n","1601            0           0                 0  \n","1094            2           1                 2  \n","...           ...         ...               ...  \n","811             0           2                 1  \n","109             0           2                 1  \n","2829            3           0                 0  \n","163             2           0                 0  \n","1921            0           0                 0  \n","\n","[576 rows x 6 columns]\n","\n","Testing Target (y_test):\n"," 471       7\n","1453     53\n","2376      0\n","1601     70\n","1094     10\n","       ... \n","811      75\n","109      26\n","2829    990\n","163       7\n","1921     47\n","Name: Historical Delay (min), Length: 576, dtype: int64\n","\n","Shapes:\n","X_train shape: (2302, 6)\n","y_train shape: (2302,)\n","X_test shape: (576, 6)\n","y_test shape: (576,)\n"]}]},{"cell_type":"code","source":["import pandas as pd\n","import numpy as np\n","from sklearn.model_selection import train_test_split, cross_val_score\n","from sklearn.ensemble import RandomForestRegressor  # You can choose any model\n","from sklearn.preprocessing import LabelEncoder\n","\n","# Load the dataset\n","data = pd.read_csv('train delay data.csv')\n","\n","# Handle Missing Values\n","numeric_cols = data.select_dtypes(include=['float64', 'int64']).columns\n","data[numeric_cols] = data[numeric_cols].fillna(data[numeric_cols].median())\n","\n","categorical_cols = data.select_dtypes(include=['object']).columns\n","for column in categorical_cols:\n","    data[column] = data[column].fillna(data[column].mode()[0])\n","\n","# Convert categorical columns to numeric using Label Encoding\n","label_encoders = {}\n","for column in categorical_cols:\n","    le = LabelEncoder()\n","    data[column] = le.fit_transform(data[column])\n","    label_encoders[column] = le\n","\n","# Define the target variable\n","y = data['Historical Delay (min)']  # Replace with your target column name\n","\n","# Define the features\n","X = data.drop(columns=['Historical Delay (min)'])  # Exclude the target variable\n","\n","# Split the data into training and testing sets\n","X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n","\n","# Choose a model\n","model = RandomForestRegressor(n_estimators=100, random_state=42)\n","\n","# Perform cross-validation\n","cv_scores = cross_val_score(model, X_train, y_train, cv=5)  # 5-fold cross-validation\n","\n","# Display the cross-validation scores\n","print(\"\\nCross-Validation Scores:\", cv_scores)\n","print(\"Mean Cross-Validation Score:\", cv_scores.mean())\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"H6mq31sXq11F","executionInfo":{"status":"ok","timestamp":1729524121741,"user_tz":-330,"elapsed":4036,"user":{"displayName":"HANNAH JAMES","userId":"18060043825026327127"}},"outputId":"753bdb0f-d3d1-461d-ade0-5c3f40938e52"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["\n","Cross-Validation Scores: [0.9330481  0.94510839 0.94495862 0.9412063  0.94931627]\n","Mean Cross-Validation Score: 0.9427275348079911\n"]}]},{"cell_type":"markdown","source":["# New Section"],"metadata":{"id":"L0uRiKS6mUwv"}}]}